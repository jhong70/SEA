Basically we want to use php if we ever want our website to interface with an external data source.

There are alternative languages for server side scripting but php seems to be the most popular since it's pre installed on most servers.

Server side scripting can also be used to hold user sessions. So a server can know about all sessions (or users who are logged in) and basically have control over how the user interfaces with the website.... 

	For example:... What if a user hasn't logged in and he tries to access a part of the site he's not supposed to?... The server can check for a user session for that client and basically reject the user from visiting that page.

	You can dictate when a user can visit a certain page based on rules you set... In our case... if the user is logged in. 

	At the same time, the user can also hold information about a particular session... ($_SESSION array).. This array is visible to the server and holds information about the user.. That information can be whatever you define yourself.... such as.... user id.... user facebook page... friends list... etc.

	So you can access this data accross pages... Since regardless of what the user is viewing or what page he/she is on... the server will contain the $_SESSION array that you can access.


	In the most general case.... php is used to interface with a database... (mySQL). 
		For example.... What if we want to upload a picture to our data base?...

		Well we have the $_SESSION array that tells us about the user and where to find them in our database (user id)... So we use that id.. and connect to the database.... and update any values that we want for that user... done..


Otherwise.. all of the html... javascript... css... That stuff is all for client side programming.. For example.... to make the boxes the correct height... or validate forms (checking if a photo they upload is indeed a photo with a .png, .jpg format or whatever...)..


For our file... most of the scripting in scripts.js is responsible for plotting markers on the map AND fixing any height issues with what's on the page (panels, navigation bars, etc.)...

This is all independent of our database and any external data source right?
That's what javascript is used for..


Here's a case where they can work together (php and javascript)...

Lets say that we want to retrieve data from our database.....

	1. Get the user id from $_SESSION    (php)
	2. Connect to the database           (php)
	3. Retrieve data we want			 (php)
	4. SEND that data to a javascript function (php)
	5. Now the javascript funciton can process that data and spit it back out to the user's page... (remember javascript is client side... so anything that we update on the screen to the user is done through javascript... NOT php.. so we have to pass our data to javascript to show it).


	That's basically it.. html + javascript + php working together.. in a general sense..



But that sounds kind of hard right?...

Well that's why there are libraries out there that do all of this stuff for us....

For php... there's Cakephp..
For javascript... there's jquery and in our case... jquery mobile.. (this removes us the need to type out long statements to do trivial things with javascript..)

	In jquery.. Basically you have access to this SUPER global variable called $
	You can call methods from this $ variable to do trivial things...

		For example.... $.changePage('http://www.gatech.edu');
				This will change the current page to the georgia tech website... "How the hell would you do this in regular javascript?? I dont know.... This is super convenient"

		Another.... $('#someElementInThePage').html('<p>hello</p>');
				When you do something like this.... $('').method().... you are getting a hold of some element in the current page and manipulating it by calling some methods that will allow you to do things to that element on the page.. Very simple way to change things on the page when lets say... we want to push new data to the screen.... or change the height of something when the user changes the height of the browser.

---------------Some Html file that the user is viewing-------------
				<div id="someElement">
					<p>Hello</p>   <!-- This was injected-->
					<p>Hi</p>		<!-- This was injected -->
				</div>
------------------------------------------------------------------


------Some script that's called or running
				$('#someElement').html('<p>Hello</p>');
				$('#someElement').append('<p>Hi</p>');


Let's look at some of our code to see how all of this translates...


	1. index.php

		-The first thing you see is <?php ...... ?>
			- What is this?

			- This is telling the browser, which is parsing the website, that this is php code.
			- Whatever is in <?php .... ?> will be run by the server...
			- Let's look at what's in the php tag...

				<?php 
    				ob_start(); 
    				session_start(); 
    				header("Cache-Control: no-store, no-cache, must-revalidate");
    				// Check, if user is already logged in, jump to the main page
					if (isset($_SESSION['userprofile']) ) {
    					header('Location: http://seaapp.netne.net/main.php');
					}
				?>

			- ob_start(); is some method defined by OpAuth library. This is used to initialize the library.. (not sure what this exactly does right now)

			- session_start(); Starts a user session specific to this user ON the server.. This means that this session is persistent throughout the time the user is viewing our website.. Note that this means that whenever we want to run php code and we want to access the $_SESSION array or any persistent data we saved about the user,... we would have to RESUME our previously started session to access that data right? Right.... SO... we call start_session().. and we should be able to access $_SESSION.

			-header() will do various misc. things regarding the browser itself.. header(Catch-Control....) will change caching (saving) properties for the page.. Specifically that statement will not allow the browser to save a version of this page..





